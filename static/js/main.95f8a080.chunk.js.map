{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","api/posts.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","_ref","userPosts","selectedPost","_ref$setSelectedPost","setSelectedPost","_ref$setCreateNewComm","setCreateNewComment","resetSelectedPost","undefined","_jsxs","children","_jsx","className","map","post","id","title","type","onClick","selectPost","Loader","request","url","delay","data","arguments","length","options","method","body","JSON","stringify","headers","Promise","resolve","setTimeout","then","fetch","response","json","client","NewCommentForm","postId","_ref$setPostComments","setPostComments","_ref$setErrorMessage","setErrorMessage","_useState","useState","_useState2","_slicedToArray","nameValue","setNameValue","_useState3","_useState4","emailValue","setEmailValue","_useState5","_useState6","commentTextValue","setCommentTextValue","_useState7","_useState8","errorNameValue","setErrorNameValue","_useState9","_useState10","errorEmailValue","setErrorEmailValue","_useState11","_useState12","errorCommentTextValue","setErrorCommentTextValue","_useState13","_useState14","loader","setLoader","addNewComment","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newComment","serverComment","wrap","_context","prev","next","name","trim","email","sent","prevComments","concat","_toConsumableArray","t0","finish","stop","apply","handleAddComment","event","preventDefault","onSubmit","htmlFor","placeholder","classNames","value","onChange","target","_Fragment","PostDetails","createNewComment","postComments","errorMessage","useEffect","catch","finally","deleteComment","commentId","filter","comment","deleteCommentData","commentBody","href","UserSelector","users","selectedUser","_ref$setSelectedUser","setSelectedUser","isActiveDropDown","setIsActiveDropDown","onBlur","role","user","chooseUser","App","setUsers","setUserPosts","userId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.95f8a080.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\n\ninterface Props {\n  userPosts: Post[],\n  selectedPost: Post | undefined,\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | undefined>>,\n  setCreateNewComment: React.Dispatch<React.SetStateAction<boolean>>,\n}\n\nexport const PostsList: React.FC<Props> = ({\n  userPosts,\n  selectedPost,\n  setSelectedPost = () => {},\n  setCreateNewComment = () => {},\n}) => {\n  const selectPost = (post: Post) => {\n    setSelectedPost(post);\n    setCreateNewComment(false);\n  };\n\n  const resetSelectedPost = () => {\n    setSelectedPost(undefined);\n    setCreateNewComment(false);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {\n            userPosts.map(post => {\n              const { id, title } = post;\n\n              return (\n                <tr data-cy=\"Post\" key={id}>\n                  <td data-cy=\"PostId\">{id}</td>\n\n                  <td data-cy=\"PostTitle\">\n                    {title}\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    {\n                      selectedPost && selectedPost.id === id\n                        ? (\n                          <button\n                            type=\"button\"\n                            data-cy=\"PostButton\"\n                            className=\"button is-link is-blue\"\n                            onClick={resetSelectedPost}\n                          >\n                            Close\n                          </button>\n                        ) : (\n                          <button\n                            type=\"button\"\n                            data-cy=\"PostButton\"\n                            className=\"button is-link is-light\"\n                            onClick={() => selectPost(post)}\n                          >\n                            Open\n                          </button>\n                        )\n                    }\n                  </td>\n                </tr>\n              );\n            })\n          }\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { postCommentData } from '../api/posts';\nimport { Comment } from '../types/Comment';\n\ninterface Props {\n  postId: number,\n  setPostComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n  setErrorMessage: React.Dispatch<React.SetStateAction<boolean>>,\n}\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  setPostComments = () => {},\n  setErrorMessage = () => {},\n}) => {\n  const [nameValue, setNameValue] = useState<string>('');\n  const [emailValue, setEmailValue] = useState<string>('');\n  const [commentTextValue, setCommentTextValue] = useState<string>('');\n\n  const [errorNameValue, setErrorNameValue] = useState<boolean>(false);\n  const [errorEmailValue, setErrorEmailValue] = useState<boolean>(false);\n  const [errorCommentTextValue, setErrorCommentTextValue] = useState<boolean>(false);\n\n  const [loader, setLoader] = useState<boolean>(false);\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNameValue(event.target.value);\n    setErrorNameValue(false);\n  };\n\n  const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmailValue(event.target.value);\n    setErrorEmailValue(false);\n  };\n\n  const handleCommentTextChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setCommentTextValue(event.target.value);\n    setErrorCommentTextValue(false);\n  };\n\n  const resetFormClear = () => {\n    setNameValue('');\n    setEmailValue('');\n    setCommentTextValue('');\n\n    setErrorNameValue(false);\n    setErrorEmailValue(false);\n    setErrorCommentTextValue(false);\n  };\n\n  const resetFormAdd = () => {\n    setNameValue('');\n    setEmailValue('');\n\n    setErrorNameValue(false);\n    setErrorEmailValue(false);\n  };\n\n  const addNewComment = async () => {\n    setLoader(true);\n\n    try {\n      const newComment = {\n        postId,\n        name: nameValue.trim(),\n        email: emailValue.trim(),\n        body: commentTextValue.trim(),\n      };\n\n      const serverComment = await postCommentData(newComment);\n\n      setPostComments(prevComments => [...prevComments, serverComment]);\n\n      resetFormAdd();\n    } catch {\n      setErrorMessage(true);\n    } finally {\n      setLoader(false);\n    }\n  };\n\n  const handleAddComment = (\n    event: React.FormEvent<HTMLFormElement> | React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    event.preventDefault();\n\n    if (!nameValue.trim()) {\n      setErrorNameValue(true);\n    }\n\n    if (!emailValue.trim()) {\n      setErrorEmailValue(true);\n    }\n\n    if (!commentTextValue.trim()) {\n      setErrorCommentTextValue(true);\n    }\n\n    if (errorNameValue || errorEmailValue || errorCommentTextValue) {\n      return;\n    }\n\n    addNewComment();\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleAddComment}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': errorNameValue,\n            })}\n            value={nameValue}\n            onChange={handleNameChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {\n            errorNameValue && (\n              <>\n                <span\n                  className=\"icon is-small is-right has-text-danger\"\n                  data-cy=\"ErrorIcon\"\n                >\n                  <i className=\"fas fa-exclamation-triangle\" />\n                </span>\n                <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n                  Name is required\n                </p>\n              </>\n            )\n          }\n\n        </div>\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': errorEmailValue,\n            })}\n            value={emailValue}\n            onChange={handleEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {\n            errorEmailValue && (\n              <>\n                <span\n                  className=\"icon is-small is-right has-text-danger\"\n                  data-cy=\"ErrorIcon\"\n                >\n                  <i className=\"fas fa-exclamation-triangle\" />\n                </span>\n                <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n                  Email is required\n                </p>\n              </>\n            )\n          }\n        </div>\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('input', {\n              'is-danger': errorCommentTextValue,\n            })}\n            value={commentTextValue}\n            onChange={handleCommentTextChange}\n          />\n        </div>\n\n        {\n          errorCommentTextValue && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Enter some text\n            </p>\n          )\n        }\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': loader,\n            })}\n            onClick={handleAddComment}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={resetFormClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getPostsData = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getUsersData = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getCommentsData = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const postCommentData = (data: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteCommentData = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { deleteCommentData, getCommentsData } from '../api/posts';\n\ninterface Props {\n  selectedPost: Post,\n  createNewComment: boolean,\n  setCreateNewComment: React.Dispatch<React.SetStateAction<boolean>>,\n}\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  createNewComment,\n  setCreateNewComment = () => { },\n}) => {\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [loader, setLoader] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<boolean>(false);\n\n  useEffect(() => {\n    setLoader(true);\n    setErrorMessage(false);\n\n    getCommentsData(selectedPost.id)\n      .then(setPostComments)\n      .catch(() => setErrorMessage(true))\n      .finally(() => setLoader(false));\n  }, [selectedPost]);\n\n  const createNewCommentForm = () => {\n    setCreateNewComment(true);\n  };\n\n  const deleteComment = (commentId: number) => {\n    setPostComments(prevComments => prevComments\n      .filter(comment => comment.id !== commentId));\n\n    deleteCommentData(commentId);\n  };\n\n  const { id, title, body } = selectedPost;\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {\n            loader && (\n              <Loader />\n            )\n          }\n\n          {\n            errorMessage && (\n              <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                Something went wrong\n              </div>\n            )\n          }\n\n          {\n            (!loader && !errorMessage\n              && postComments && postComments.length === 0) && (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            )\n          }\n\n          {\n            !errorMessage && postComments && postComments.length > 0 && (\n              <>\n                <p className=\"title is-4\">Comments:</p>\n\n                {\n                  postComments.map(comment => {\n                    const {\n                      id: commentId,\n                      name,\n                      email,\n                      body: commentBody,\n                    } = comment;\n\n                    return (\n                      <article\n                        className=\"message is-small\"\n                        data-cy=\"Comment\"\n                        key={commentId}\n                      >\n                        <div className=\"message-header\">\n                          <a\n                            href={`mailto:${email}`}\n                            data-cy=\"CommentAuthor\"\n                          >\n                            {name}\n                          </a>\n                          <button\n                            data-cy=\"CommentDelete\"\n                            type=\"button\"\n                            className=\"delete is-small\"\n                            aria-label=\"delete\"\n                            onClick={() => deleteComment(commentId)}\n                          >\n                            delete button\n                          </button>\n                        </div>\n\n                        <div className=\"message-body\" data-cy=\"CommentBody\">\n                          {commentBody}\n                        </div>\n                      </article>\n                    );\n                  })\n                }\n              </>\n            )\n          }\n\n          {\n            !errorMessage && (\n              createNewComment\n                ? (\n                  <NewCommentForm\n                    postId={id}\n                    setPostComments={setPostComments}\n                    setErrorMessage={setErrorMessage}\n                  />\n                ) : (\n                  <button\n                    data-cy=\"WriteCommentButton\"\n                    type=\"button\"\n                    className=\"button is-link\"\n                    onClick={createNewCommentForm}\n                  >\n                    Write a comment\n                  </button>\n                )\n            )\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\n\ninterface Props {\n  users: User[],\n  selectedUser: User | undefined,\n  setSelectedUser: React.Dispatch<React.SetStateAction<User | undefined>>,\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | undefined>>,\n}\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser = () => { },\n  setSelectedPost = () => { },\n}) => {\n  const [isActiveDropDown, setIsActiveDropDown] = useState<boolean>(false);\n\n  const changeDropDownState = () => {\n    setIsActiveDropDown(!isActiveDropDown);\n  };\n\n  const closeDropDown = () => {\n    setTimeout(() => {\n      setIsActiveDropDown(false);\n    }, 100);\n  };\n\n  const chooseUser = (user: User) => {\n    setSelectedUser(user);\n    setSelectedPost(undefined);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': isActiveDropDown,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={changeDropDownState}\n          onBlur={closeDropDown}\n        >\n          <span>\n            {\n              selectedUser\n                ? selectedUser.name\n                : 'Choose a user'\n            }\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {\n            users.map(user => {\n              const { id, name } = user;\n\n              return (\n                <a\n                  key={id}\n                  href={`#user-${id}`}\n                  className=\"dropdown-item\"\n                  onClick={() => chooseUser(user)}\n                >\n                  {name}\n                </a>\n              );\n            })\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getPostsData, getUsersData } from './api/posts';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User>();\n  const [selectedPost, setSelectedPost] = useState<Post>();\n  const [loader, setLoader] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<boolean>(false);\n  const [createNewComment, setCreateNewComment] = useState<boolean>(false);\n\n  useEffect(() => {\n    getUsersData()\n      .then(setUsers)\n      .catch(() => setErrorMessage(true));\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setLoader(true);\n      setErrorMessage(false);\n\n      getPostsData(selectedUser.id)\n        .then(setUserPosts)\n        .catch(() => setErrorMessage(true))\n        .finally(() => setLoader(false));\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  setSelectedPost={setSelectedPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {\n                  !selectedUser && (\n                    <p data-cy=\"NoSelectedUser\">\n                      No user selected\n                    </p>\n                  )\n                }\n\n                {\n                  loader && (\n                    <Loader />\n                  )\n                }\n\n                {\n                  errorMessage && (\n                    <div\n                      className=\"notification is-danger\"\n                      data-cy=\"PostsLoadingError\"\n                    >\n                      Something went wrong!\n                    </div>\n                  )\n                }\n\n                {\n                  (selectedUser && userPosts.length === 0\n                    && !errorMessage && !loader) && (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  )\n                }\n\n                {\n                  selectedUser && userPosts.length > 0 && (\n                    <PostsList\n                      userPosts={userPosts}\n                      selectedPost={selectedPost}\n                      setSelectedPost={setSelectedPost}\n                      setCreateNewComment={setCreateNewComment}\n                    />\n                  )\n                }\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  selectedPost={selectedPost}\n                  createNewComment={createNewComment}\n                  setCreateNewComment={setCreateNewComment}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}